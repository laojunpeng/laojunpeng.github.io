import{o as n,c as s,a}from"./app.5f046f61.js";const t='{"title":"React 为什么要搞一个 Hooks？","description":"","frontmatter":{"title":"React 为什么要搞一个 Hooks？"},"relativePath":"react/hooks.md","lastUpdated":1629947910846}',o={},p=[a('<h1 id="react-为什么要搞一个-hooks？"><a class="header-anchor" href="#react-为什么要搞一个-hooks？" aria-hidden="true">#</a> React 为什么要搞一个 Hooks？</h1><p><strong>参考：</strong></p><p>掘金 <a href="https://juejin.cn/user/2717648474607864" target="_blank" rel="noopener noreferrer">zach5078</a>的 《<a href="https://juejin.cn/post/6844903709927800846#heading-1" target="_blank" rel="noopener noreferrer">30 分钟精通 React Hooks</a>》</p><p>掘金 <a href="https://juejin.cn/user/3526889033438574" target="_blank" rel="noopener noreferrer">蚂蚁保险体验技术</a>的《<a href="https://juejin.cn/post/6844903833764642830" target="_blank" rel="noopener noreferrer">从源码剖析 useState 的执行过程</a>》</p><h4 id="函数组件没有-hooks-的时候，不能持有自身状态。"><a class="header-anchor" href="#函数组件没有-hooks-的时候，不能持有自身状态。" aria-hidden="true">#</a> 函数组件没有 hooks 的时候，不能持有自身状态。</h4><blockquote><p>例子</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>React 内部</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">Greeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;p&gt;Hello&lt;/p&gt;</span>\n</code></pre></div><p>每次渲染，就是执行一次 function，不能持有自身状态值。改变只能通过 props</p><p>Greeting.js</p><div class="language-javascript"><pre><code><span class="token keyword">class</span> <span class="token class-name">Greeting</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>React 内部</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Greeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Greeting {}</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;p&gt;Hello&lt;/p&gt;</span>\n</code></pre></div><p>每次类组件更新时只调用 <strong>render</strong> 方法,这就使得我们可以使用如 state 或生命周期方法等很多其他特性。 <strong>因为类组件有实例，所以可以保持状态。</strong></p></blockquote><h4 id="props-更新问题"><a class="header-anchor" href="#props-更新问题" aria-hidden="true">#</a> props 更新问题</h4><p>参考文章：<a href="https://overreacted.io/zh-hans/how-are-function-components-different-from-classes/" target="_blank" rel="noopener noreferrer">函数式组件与类组件有何不同？</a> [<a href="https://codesandbox.io/s/pjqnl16lm7" target="_blank" rel="noopener noreferrer">live demo</a>]</p><p>函数组件：</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">ProfilePage</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">showMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Followed &#39;</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>showMessage<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Follow<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> ProfilePage<span class="token punctuation">;</span>\n</code></pre></div><p>类组件：</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ProfilePage</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">showMessage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Followed &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>showMessage<span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>Follow<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> ProfilePage<span class="token punctuation">;</span>\n</code></pre></div><p>通过这个例子发现执行 <strong>setTimeout</strong> 后，回调 <strong>alert</strong> 结果不一样，<strong>function</strong> 是 <strong>alert</strong> 点击时的值，<strong>class</strong> 是 <strong>alert</strong> 回调时的值。</p><p>网上很多说法是利用了闭包，但是我想了一下午都想不明白，直到我联系上一个例子看。</p><p><strong>先来看类组件：</strong> 每次父组件更改了传入子组件的 <strong>props</strong>，子组件会重新渲染。类组件重新渲染是调用已有实例的 <strong>render</strong> 方法。 <strong>showMessage</strong> 方法执行时，<strong>this</strong> 是引用，所以 <strong>this.props</strong> 是当前的 <strong>props</strong>。输出就是回调时(即时)的值.</p><p><strong>函数组件：</strong> 函数组件重新渲染是执行自身，渲染 <strong>return</strong> 的值。 由于不像类组件是同一个实例，<strong>setTimeout</strong> 回调仍然是原来的 <strong>showMessage</strong> 方法，输出原来的 <strong>props</strong> 值。 如果想要更新成当前值，只需要将传入的 <strong>props</strong> 变成引用，当输出时就会输出当前引用值(即时值)。</p><p><strong>使用 hooks：</strong> 当父组件传入 <strong>useState</strong> 生成对象，函数组件的 <strong>props</strong> 是值。 当父组件传入 <strong>useRef</strong> 生成对象，函数组件的 <strong>props</strong> 是引用。</p><h4 id="hooks-原理："><a class="header-anchor" href="#hooks-原理：" aria-hidden="true">#</a> hooks 原理：</h4><p>说到这里，到底 <strong>hooks</strong> 的原理是什么？ 既然函数组件不能持有自身状态，<strong>useState</strong> 是怎么做到保存变量的？<strong>useEffect</strong> 是怎么比较数据变化的？</p><p><strong>个人理解：</strong></p><p><strong>hooks</strong> 赋予了 <strong>function</strong> 组件利用闭包缓存变量的能力。(这里的 <strong>hooks</strong> 指的是官方的几个 <strong>hooks</strong>) 再说白一点，用 <strong>function</strong> 外的变量保存 <strong>function</strong> 内的值，每次改变 props 之类的引起重新渲染导致重新执行 <strong>function</strong> 也不会丢失值了。</p>',21)];o.render=function(a,t,o,e,c,r){return n(),s("div",null,p)};export{t as __pageData,o as default};
