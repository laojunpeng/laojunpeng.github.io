import{o as n,c as s,a}from"./app.5f046f61.js";const t='{"title":"同步异步","description":"","frontmatter":{"title":"同步异步"},"headers":[{"level":3,"title":"单线程","slug":"单线程"},{"level":3,"title":"同步","slug":"同步"},{"level":3,"title":"异步","slug":"异步"},{"level":3,"title":"事件循环(Event Loop）","slug":"事件循环-event-loop）"},{"level":3,"title":"宏任务和微任务","slug":"宏任务和微任务"},{"level":3,"title":"既然是Promise，加上async和await呢？","slug":"既然是promise，加上async和await呢？"}],"relativePath":"js/同步异步.md","lastUpdated":1629947910846}',p={},o=[a('<h1 id="js-的同步、异步、event-loop"><a class="header-anchor" href="#js-的同步、异步、event-loop" aria-hidden="true">#</a> JS 的同步、异步、Event Loop</h1><p><strong>参考</strong>： <br> isboyjc：<a href="https://juejin.cn/post/6844904050543034376#heading-12" target="_blank" rel="noopener noreferrer">「硬核 JS」一次搞懂 JS 运行机制</a><br> 阮一峰：<a href="https://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener noreferrer">JavaScript 运行机制详解：再谈 Event Loop</a></p><h3 id="单线程"><a class="header-anchor" href="#单线程" aria-hidden="true">#</a> 单线程</h3><p>JS 是单线程语言，即同一个时间只能做一件事。</p><h3 id="同步"><a class="header-anchor" href="#同步" aria-hidden="true">#</a> 同步</h3><p>在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。</p><h3 id="异步"><a class="header-anchor" href="#异步" aria-hidden="true">#</a> 异步</h3><p>将某些任务分类成可异步执行任务，异步任务指的是，不进入主线程、而进入&quot;任务队列&quot;（task queue）的任务，只有&quot;任务队列&quot;通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><h3 id="事件循环-event-loop）"><a class="header-anchor" href="#事件循环-event-loop）" aria-hidden="true">#</a> 事件循环(Event Loop）</h3><blockquote><p><br>（1）所有同步任务都在主线程上执行，形成一个执行栈（execution context stack）。 <br> （2）主线程之外，还存在一个&quot;任务队列&quot;（task queue）。只要异步任务有了运行结果，就在&quot;任务队列&quot;之中放置一个事件。 <br> （3）一旦&quot;执行栈&quot;中的所有同步任务执行完毕，系统就会读取&quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。 <br> （4）主线程不断重复上面的第三步。<br><br></p></blockquote><p>这样反反复复就是我们所谓的 <strong>事件循环(Event Loop)</strong></p><p>仔细看，所有同步任务执行完毕，再去执行异步任务。骤眼看好像跟我们的编码习惯不一样。 那从习题中找答案吧：</p><div class="language-javascript"><pre><code><span class="token comment">// 同步任务</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是同步任务1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 异步定时任务</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是定时器回调&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 异步http请求任务</span>\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是promise同步任务&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是promise回调&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 同步任务</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;我是同步任务2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>执行下来好像也符合上面的说法，先执行同步任务，再执行异步任务。</p><h3 id="宏任务和微任务"><a class="header-anchor" href="#宏任务和微任务" aria-hidden="true">#</a> 宏任务和微任务</h3><p>宏任务即上面提到的 task</p><blockquote><h4 id="宏任务"><a class="header-anchor" href="#宏任务" aria-hidden="true">#</a> 宏任务</h4><p>由于 JS 引擎线程和 GUI 渲染线程是互斥的关系，浏览器为了能够使宏任务和 DOM 任务有序的进行，会在一个宏任务执行结果后，在下一个宏任务执行前，GUI 渲染线程开始工作，对页面进行渲染<br> 宏任务 -&gt; GUI 渲染 -&gt; 宏任务 -&gt; ...<br></p><h4 id="常见的宏任务"><a class="header-anchor" href="#常见的宏任务" aria-hidden="true">#</a> 常见的宏任务</h4><ul><li>主代码块</li><li>setTimeout</li><li>setInterval</li><li>setImmediate ()-Node</li><li>requestAnimationFrame ()-浏览器<br></li></ul><h4 id="微任务"><a class="header-anchor" href="#微任务" aria-hidden="true">#</a> 微任务</h4><p>ES6 新引入了 Promise 标准，同时浏览器实现上多了一个 microtask 微任务概念，在 ECMAScript 中，microtask 也被称为 jobs 我们已经知道宏任务结束后，会执行渲染，然后执行下一个宏任务， 而微任务可以理解成在当前宏任务执行后立即执行的任务 当一个宏任务执行完，会在渲染前，将执行期间所产生的所有微任务都执行完 宏任务 -&gt; 微任务 -&gt; GUI 渲染 -&gt; 宏任务 -&gt; ...</p><h4 id="常见微任务"><a class="header-anchor" href="#常见微任务" aria-hidden="true">#</a> 常见微任务</h4><ul><li>process.nextTick ()-Node</li><li>Promise.then()</li><li>Promise.catch()</li><li>Promise.finally()</li><li>Object.observe</li><li>MutationObserver<br><br></li></ul></blockquote><p>结合 GUI 渲染来看这段代码</p><div class="language-javascript"><pre><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:black&#39;</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:red&#39;</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:blue&#39;</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:pink&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>主代码块就是一次宏任务，执行完一次再执行渲染，所以只渲染了最后的粉色</p><div class="language-javascript"><pre><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:blue&#39;</span><span class="token punctuation">;</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:black&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>两次宏任务，渲染了两次</p><div class="language-javascript"><pre><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:blue&#39;</span><span class="token punctuation">;</span>\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:pink&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>直接渲染粉色，因为宏任务结束后立即实行微任务，再渲染</p><p>若果 promise 包含一个延时宏任务又该怎么理解？</p><div class="language-javascript"><pre><code><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>个人解读，<strong>new Promise</strong> 是一个宏任务，里面包含一个 <strong>setTimeout</strong> 的延时宏任务。1ms 过去后，执行 <strong>setTimeout</strong> 内的代码，<strong>resolve</strong> 产生一个 <strong>Promise.then</strong> 的微任务。</p><p>除最后的例子和理解，大部分参考了掘金作者 isboyjc 的<a href="https://juejin.cn/post/6844904050543034376#heading-12" target="_blank" rel="noopener noreferrer">「硬核 JS」一次搞懂 JS 运行机制</a></p><h3 id="既然是promise，加上async和await呢？"><a class="header-anchor" href="#既然是promise，加上async和await呢？" aria-hidden="true">#</a> 既然是Promise，加上async和await呢？</h3><p>后续看到掘金的blue_zns<a href="https://juejin.cn/post/6894078909592109069" target="_blank" rel="noopener noreferrer">「吊打面试官」彻底理解事件循环、宏任务、微任务</a></p><p>加两道思考题吧</p><div class="language-javascript"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ddd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-javascript"><pre><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;t1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;t2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bbb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',33)];p.render=function(a,t,p,c,e,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
